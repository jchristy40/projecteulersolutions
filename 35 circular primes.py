##define a function to check for primes
##if number is prime, run it through the circular function
## circular function rotates the numbers and checks if there is an even number or if the rotation is not prime
##the rotated numbers are generated by string slicing
##if our number survives the circular function, pass it to our new list then count the list

##this could be done faster by generating a hashable data structure of primes and then checking if our cicularly rotating primes are all in the set, but this seems to run fairly quickly 

def isprime(x):
	for i in range(2,x):
		if x%2==0:
			return False
		elif x%i==0:
			return False
		elif i*i>x:
			return True
	else:
		return True
		

def circular(x):
	badnum=['0','2','4','6','8']
	builder=''
	check=False
	x=str(x)
	counter=len(x)
	while counter > 0:
		first=x[(len(x)-1)]
		if first in badnum:
			builder=None
			break
		second=x[0:(len(x)-1)]
		builder=first + second
		builder=int(builder)
		x=str(builder)
		if isprime(builder):
			counter=counter-1
		else:
			builder=None
			break
	else:
		return builder
		
	
	
	
list=[]

builder=''

for x in range(2,1000000):
	builder=circular(x)
	if builder==None:
		continue
	else:
		list.append(builder)

print(list)
print((len(list)+1))
